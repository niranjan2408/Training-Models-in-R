library(caTools)
library(corpcor)
library(car)
library(psych)
library(ROCR)
library(dplyr)
library(doParallel)
library(pROC)
registerDoParallel(core=4)
par(mfrow=c(1,2))
org_bank<-read.csv(choose.files())
str(org_bank)
summary(org_bank)
sum(is.na(org_bank))
hist(org_bank$age)
boxplot(org_bank$age)
hist(org_bank$balance)
boxplot(org_bank$balance)
hist(org_bank$day)
boxplot(org_bank$day)
hist(org_bank$duration)
boxplot(org_bank$duration)
hist(org_bank$campaign)
boxplot(org_bank$campaign)
hist(org_bank$pdays)
boxplot(org_bank$pdays)
hist(org_bank$previous)
boxplot(org_bank$previous)
#Splitting the data into train and test with 0.7 split ratio
split<- sample.split(org_bank$y,SplitRatio = 0.7)
train_data<-subset(org_bank,split==TRUE)
test_data<-subset(org_bank,split==FALSE)
model<-glm(train_data$y~.,train_data,family = "binomial")
summary(model)
train_data_1<-train_data[,-c(1,5,15,14)]
model1<-glm(train_data_1$y~.,train_data_1,family = "binomial")
summary(model1)
prob1 <- predict(model1,train_data_1,type="response")
confusion1<-table(prob1>0.5,train_data_1$y)
confusion1
Accuracy1<-sum(diag(confusion1)/sum(confusion1))
Accuracy1
#created variable (pred_values) with if predicted p value is greater than 0.5 put "yes" else "no"
pred_values1 <- ifelse(prob1>=0.5,"yes","no")
#Added column of (pred_values) to the original train data set 1
train_data_1[,"pred_values1"] <- pred_values1
#Receiver Operating Characteristic (ROC) Curve Analysis
ROCR_Prediction1<-prediction(prob1,train_data_1$y)
ROCR_Performance1<-performance(ROCR_Prediction1,'tpr','fpr')
plot(ROCR_Performance1,colorize=T,text.adj=c(-0.2,1.7),print.cutoffs.at=seq(0.01,by=0.01))
str(ROCR_Performance1)
ROCR_cutoff1 <- data.frame(cut_off = ROCR_Performance1@alpha.values[[1]],fpr=ROCR_Performance1@x.values,tpr=ROCR_Performance1@y.values)
colnames(ROCR_cutoff1) <- c("cut_off","FPR","TPR")
ROCR_cutoff1<-round(ROCR_cutoff1,3)
confusion2<-table(prob1>0.45,train_data_1$y)
confusion2
Accuracy2<-sum(diag(confusion2)/sum(confusion2))
Accuracy2
#as per below calculation proportion of majority class is 88.3%
table(train_data_1$y)
27945/31647
updated_pred_values <- ifelse(prob1>=0.39,"yes","no")
train_data_1[,"updated_pred_values"] <- updated_pred_values
confusion2<-table(prob1>0.39,train_data_1$y)
confusion2
Accuracy2<-sum(diag(confusion2)/sum(confusion2))
Accuracy2
auc<-performance(ROCR_Prediction1,measure="auc")
str(auc)
auc<-auc@y.values[[1]]
auc
test_data_1<-test_data[,-c(1,5,15,14)]
test_prob1 <- predict(model1,test_data_1,type="response")
confusion1_test<-table(test_prob1>0.39,train_data_1$y)
confusion1_test<-table(test_prob1>0.39,test_data_1$y)
confusion1_test
Accuracy1_test<-sum(diag(confusion1_test)/sum(confusion1_test))
Accuracy1_test
library(arules)
library(arulesViz)
my_movies<-read.csv(choose.files()) #read csv file
my_movies_2<-my_movies[,1:5] #selecting only required columns
my_movies2<-as(my_movies2,"transactions")
my_movies2<-as.matrix(my_movies_2)
my_movies2<-as(my_movies2,"transactions")
my_movies_2<-my_movies[,1:5] #selecting only required columns
my_movies2<-as.matrix(my_movies_2)
my_movies2<-as(my_movies2,"transactions")
read.transactions(my_movies_2,format = "basket")
my_movies2<-read.transactions(my_movies_2,format = "basket")
View(my_movies_2)
my_movies2<-as(my_movies2,"transactions")
my_movies_2<-my_movies[,1:5] #selecting only required columns
my_movies2<-as(my_movies2,"transactions")
my_movies2<-as(my_movies_2,"transactions")
summary(my_movies_2)
my_movies_2<-my_movies[,1:5] #selecting only required columns
my_movies_2<-as(my_movies_2,"transactions")
summary(my_movies_2)
inspect(my_movies_2[1:5])
summary(my_movies_2)
rules<-apriori(groceries,parameter = list(support=0.1,confidence=0.7,minlen=5))
rules<-apriori(my_movies_2,parameter = list(support=0.1,confidence=0.7,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.1,confidence=0.7,minlen=5))
inspect(sort(rules_2,by="lift"))
library(arulesViz)
plot(rules, method = "scatterplot")
plot(rules, method = "grouped")
rules_2<-apriori(my_movies_2,parameter = list(support=0.2,confidence=0.7,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.18,confidence=0.7,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.15,confidence=0.7,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.12,confidence=0.7,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.12,confidence=0.6,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.12,confidence=0.6,minlen=4))
rules_2<-apriori(my_movies_2,parameter = list(support=0.12,confidence=0.8,minlen=4))
rules_2<-apriori(my_movies_2,parameter = list(support=0.15,confidence=0.8,minlen=4))
rules_2<-apriori(my_movies_2,parameter = list(support=0.15,confidence=0.85,minlen=4))
rules_2<-apriori(my_movies_2,parameter = list(support=0.15,confidence=0.89,minlen=4))
rules_2<-apriori(my_movies_2,parameter = list(support=0.15,confidence=0.7,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.1,confidence=0.7,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.1,confidence=0.9,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.11,confidence=0.9,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.11,confidence=0.6,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.11,confidence=0.6,minlen=5))
inspect(sort(rules_2,by="lift"))
library(arulesViz)
plot(rules_2, method = "scatterplot")
plot(rules_2, method = "grouped")
plot(rules_2, method = "graph")
inspect(head(sort(rules_2, by="lift")))
rules_2<-apriori(my_movies_2,parameter = list(support=0.13,confidence=0.6,minlen=5))
rules_2<-apriori(my_movies_2,parameter = list(support=0.13,confidence=0.8,minlen=5))
inspect(sort(rules_2,by="lift"))
library(arulesViz)
plot(rules_2, method = "scatterplot")
plot(rules_2, method = "grouped")
install.packages("recommenderlab")
#Installing and loading the libraries
#install.packages("recommenderlab", dependencies=TRUE)
#install.packages("Matrix")
library("recommenderlab")
library(caTools)
#movie rating data
movie_rate_data <- read.csv("/resources/data/data1.csv")
#movie rating data
movie_rate_data <- read.csv(choose.files())
#metadata about the variable
str(movie_rate_data)
#rating distribution
hist(movie_rate_data$rating)
#the datatype should be realRatingMatrix inorder to build recommendation engine
movie_rate_data_matrix <- as(movie_rate_data, 'realRatingMatrix')
movie_recomm_model1 <- Recommender(movie_rate_data_matrix, method="POPULAR")
View(movie_rate_data)
View(movie_rate_data_matrix)
as(recommended_items1, "list")
#Predictions for two users
recommended_items1 <- predict(movie_recomm_model1, movie_rate_data_matrix[413:414], n=5)
as(recommended_items1, "list")
movie_rate_data_matrix[413:414]
View(movie_rate_data)
#Predictions for two users
recommended_items1 <- predict(movie_recomm_model1, movie_rate_data_matrix[1:2], n=5)
as(recommended_items1, "list")
#Predictions for two users
recommended_items1 <- predict(movie_recomm_model1, movie_rate_data_matrix[1:3], n=5)
as(recommended_items1, "list")
#Predictions for two users
recommended_items1 <- predict(movie_recomm_model1, movie_rate_data_matrix[8992], n=5)
#Predictions for two users
recommended_items1 <- predict(movie_recomm_model1, movie_rate_data_matrix[4081], n=5)
as(recommended_items1, "list")
View(movie_rate_data)
#Predictions for two users
recommended_items1 <- predict(movie_recomm_model1, movie_rate_data_matrix[4080], n=5)
as(recommended_items1, "list")
#Predictions for two users
recommended_items1 <- predict(movie_recomm_model1, movie_rate_data_matrix[1], n=5)
as(recommended_items1, "list")
#Predictions for two users
recommended_items1 <- predict(movie_recomm_model1, movie_rate_data_matrix[2], n=5)
as(recommended_items1, "list")
movie_recomm_model2 <- Recommender(movie_rate_data_matrix, method="UBCF")
#Predictions for two users
recommended_items2 <- predict(movie_recomm_model2, movie_rate_data_matrix[1:5], n=5)
as(recommended_items2, "list")
#movie rating data
books_data <- read.csv(choose.files())
#metadata about the variable
str(books_data)
#rating distribution
hist(books_data$rating)
#rating distribution
hist(books_data$Book.Rating)
#the datatype should be realRatingMatrix inorder to build recommendation engine
books_data_matrix <- as(books_data, 'realRatingMatrix')
books_data_model1 <- Recommender(books_data_matrix, method="POPULAR")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_model1[1:5], n=2)
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[1:5], n=2)
as(recommended_books_1, "list")
View(books_data)
books_data<-books_data[,-1]
#the datatype should be realRatingMatrix inorder to build recommendation engine
books_data_matrix <- as(books_data, 'realRatingMatrix')
books_data_model1 <- Recommender(books_data_matrix, method="POPULAR")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[1:5], n=2)
as(recommended_books_1, "list")
recommended_books_2 <- Recommender(books_data_matrix, method="UBCF")
#Predictions for two users
recommended_items2 <- predict(recommended_books_2, books_data_matrix[1:5], n=2)
as(recommended_items2, "list")
#Predictions for two users
recommended_items2 <- predict(recommended_books_2, books_data_matrix[10:15], n=2)
as(recommended_items2, "list")
#Predictions for two users
recommended_items2 <- predict(recommended_books_2, books_data_matrix[100:150], n=2)
as(recommended_items2, "list")
as(recommended_items2, "list")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[1:5], n=2)
as(recommended_books_1, "list")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[10:15], n=2)
as(recommended_books_1, "list")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix, n=2)
as(recommended_books_1, "list")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[1:5], n=5)
as(recommended_books_1, "list")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[10:15], n=5)
as(recommended_books_1, "list")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[10:15], n=5)
as(recommended_books_1, "list")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[20:25], n=5)
as(recommended_books_1, "list")
recommended_items2 <- predict(recommended_books_2, books_data_matrix[100:150], n=5)
as(recommended_items2, "list")
as(recommended_items2, "list")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[100:150], n=5)
as(recommended_books_1, "list")
sum(is.na(books_data))
library("recommenderlab")
library(caTools)
#movie rating data
books_data <- read.csv(choose.files())
books_data<-books_data[,-1]
sum(is.na(books_data))
#metadata about the variable
str(books_data)
#rating distribution
hist(books_data$Book.Rating)
#the datatype should be realRatingMatrix inorder to build recommendation engine
books_data_matrix <- as(books_data, 'realRatingMatrix')
books_data_model1 <- Recommender(books_data_matrix, method="POPULAR")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[100:115], n=5)
as(recommended_books_1, "list")
recommended_books_2 <- Recommender(books_data_matrix, method="UBCF")
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[100:115], n=5)
as(recommended_items2, "list")
as(recommended_books_2, "list")
library("recommenderlab")
library(caTools)
#movie rating data
books_data <- read.csv(choose.files())
sum(is.na(books_data))
books_data<-books_data(fill.na(" "))
#metadata about the variable
str(books_data)
#rating distribution
hist(books_data$Book.Rating)
#rating distribution
hist(books_data$average_rating)
#the datatype should be realRatingMatrix inorder to build recommendation engine
books_data_matrix <- as(books_data, 'realRatingMatrix')
books_data_model1 <- Recommender(books_data_matrix, method="POPULAR")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[1:5], n=5)
as(recommended_books_1, "list")
View(books_data)
books_data<-books_data[,c(1,11,13)]
sum(is.na(books_data))
#the datatype should be realRatingMatrix inorder to build recommendation engine
books_data_matrix <- as(books_data, 'realRatingMatrix')
books_data_model1 <- Recommender(books_data_matrix, method="POPULAR")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[1:5], n=5)
as(recommended_books_1, "list")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[10:15], n=5)
as(recommended_books_1, "list")
recommended_books_2 <- Recommender(books_data_matrix, method="UBCF")
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[100:115], n=5)
as(recommended_books_2, "list")
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:100], n=1)
as(recommended_books_2, "list")
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:100], n=1)
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:100], n=2)
recommended_books_2 <- Recommender(books_data_matrix, method="UBCF")
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:100], n=2)
as(recommended_books_2, "list")
View(books_data)
table(books_data$title)
#movie rating data
books_data <- read.csv(choose.files())
books_data<-books_data[,c(1,11,13)]
#the datatype should be realRatingMatrix inorder to build recommendation engine
books_data_matrix <- as(books_data, 'realRatingMatrix')
library("recommenderlab")
library(caTools)
books_data_model1 <- Recommender(books_data_matrix, method="POPULAR")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[10:15], n=5)
recommended_books_1
as(recommended_books_1, "list")
library("recommenderlab")
library(caTools)
#movie rating data
books_data <- read.csv(choose.files())
sum(is.na(books_data))
#metadata about the variable
str(books_data)
#rating distribution
hist(books_data$Book.Rating)
table(books_data$Book.Title)
#the datatype should be realRatingMatrix inorder to build recommendation engine
books_data_matrix <- as(books_data, 'realRatingMatrix')
books_data_model1 <- Recommender(books_data_matrix, method="POPULAR")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[10:15], n=5)
as(recommended_books_1, "list")
books_data<-books_data[,-1]
#the datatype should be realRatingMatrix inorder to build recommendation engine
books_data_matrix <- as(books_data, 'realRatingMatrix')
books_data_model1 <- Recommender(books_data_matrix, method="POPULAR")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[10:15], n=5)
as(recommended_books_1, "list")
recommended_books_2 <- Recommender(books_data_matrix, method="UBCF")
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:100], n=2)
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:10], n=2)
as(recommended_books_2, "list")
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:2], n=2)
as(recommended_books_2, "list")
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:4], n=2)
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:5], n=2)
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:6], n=2)
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1:7], n=2)
View(books_data)
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[276726], n=2)
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[276726], n=3)
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1], n=3)
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[1], n=5)
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[10:15], n=5)
library("recommenderlab")
library(caTools)
#movie rating data
books_data <- read.csv(choose.files())
books_data<-books_data[1:1000,-2]
sum(is.na(books_data))
#metadata about the variable
str(books_data)
#rating distribution
hist(books_data$Book.Rating)
#the datatype should be realRatingMatrix inorder to build recommendation engine
books_data_matrix <- as(books_data, 'realRatingMatrix')
books_data_model1 <- Recommender(books_data_matrix, method="POPULAR")
#Predictions for two users
recommended_books_1 <- predict(books_data_model1, books_data_matrix[10:15], n=5)
as(recommended_books_1, "list")
recommended_books_2 <- Recommender(books_data_matrix, method="UBCF")
#Predictions for two users
recommended_books_2 <- predict(recommended_books_2, books_data_matrix[10:15], n=5)
as(recommended_books_2, "list")
